#!/usr/bin/env node

import { executeCalendarAction } from './google-calendar-tool.js';
import dotenv from 'dotenv';

dotenv.config();

async function testUpdateEvent() {
    console.log('üß™ Test de d√©placement d\'√©v√©nement Google Calendar\n');
    console.log('=' . repeat(50));
    
    const today = new Date().toISOString().split('T')[0];
    
    // Test 1: Lister les √©v√©nements d'aujourd'hui
    console.log('\nüìã √âtape 1: Lister les √©v√©nements du jour');
    try {
        const listResult = await executeCalendarAction({
            action: 'list_events',
            date: today
        });
        console.log(listResult);
    } catch (error) {
        console.error('‚ùå Erreur liste:', error.message);
    }
    
    // Test 2: Cr√©er un √©v√©nement test
    console.log('\n‚ûï √âtape 2: Cr√©er un √©v√©nement test √† 14h');
    try {
        const createResult = await executeCalendarAction({
            action: 'create_event',
            title: 'Test Meeting pour d√©placement',
            date: today,
            time: '14:00',
            duration: 60,
            description: '√âv√©nement de test pour v√©rifier le d√©placement'
        });
        console.log(createResult);
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation:', error.message);
    }
    
    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Test 3: D√©placer l'√©v√©nement
    console.log('\nüîÑ √âtape 3: D√©placer l\'√©v√©nement de 14h √† 16h');
    try {
        const updateResult = await executeCalendarAction({
            action: 'update_event',
            title: 'Test Meeting pour d√©placement',
            date: today,
            oldTime: '14:00',
            newTime: '16:00'
        });
        console.log(updateResult);
    } catch (error) {
        console.error('‚ùå Erreur d√©placement:', error.message);
    }
    
    // Test 4: V√©rifier le d√©placement
    console.log('\n‚úÖ √âtape 4: V√©rifier le d√©placement');
    try {
        const verifyResult = await executeCalendarAction({
            action: 'list_events',
            date: today
        });
        console.log(verifyResult);
    } catch (error) {
        console.error('‚ùå Erreur v√©rification:', error.message);
    }
    
    // Test 5: Nettoyer - supprimer l'√©v√©nement test
    console.log('\nüóëÔ∏è √âtape 5: Supprimer l\'√©v√©nement test');
    try {
        const deleteResult = await executeCalendarAction({
            action: 'delete_event',
            title: 'Test Meeting pour d√©placement',
            date: today
        });
        console.log(deleteResult);
    } catch (error) {
        console.error('‚ùå Erreur suppression:', error.message);
    }
    
    console.log('\n' + '=' . repeat(50));
    console.log('‚úÖ Test termin√© !');
    console.log('\nüí° Pour tester avec le bot:');
    console.log('1. Cr√©er un meeting: "paf ajoute un rdv avec Vincent √† 19h"');
    console.log('2. Le d√©placer: "paf d√©cale le rdv avec Vincent de 19h √† 16h"');
}

testUpdateEvent().catch(console.error);